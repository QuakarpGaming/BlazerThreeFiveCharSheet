@page "/Character"
@rendermode InteractiveWebAssembly

<PageTitle>Character Sheet</PageTitle>

<div style="width: 100%" class="border border-2">
    <div class="row">
        <div class="row">
            <div class="row justify-content-start">
                <div class="col-6">
                    <div class="form-floating">
                        <InputText @bind-Value="characterName" class="form-control" id="charNamne"></InputText>
                        <label for="charNamne">Character Name</label>
                    </div>
                </div>
                <div class="col-6">
                    <div class="form-floating">
                        <InputText @bind-Value="player" class="form-control" id="player"></InputText>
                        <label for="charNamne">player</label>
                    </div>
                </div>
            </div>
        </div>


        <div class="row">
            <div class="row justify-content-start">
                <div class="col-3">
                    <div class="form-floating">
                        <InputText @bind-Value="classLvlString" id="ClassLVL" class="form-control"></InputText>
                        <label for="ClassLVL">Class And Level</label>
                    </div>
                </div>
                <div class="col-3">
                    <div class="form-floating">
                        <InputSelect class="form-select" @bind-Value="race" @bind-Value:after=AlterStatsRace id="race">
                            <option value="HUM">Human</option>
                            <option value="ELF">Elf</option>
                            <option value="DWF">Dwarf</option>
                            <option value="GNO">Gnome</option>
                            <option value="HEL">Half Elf</option>
                            <option value="HOR">Half-Orc</option>
                            <option value="HAF">Halflings</option>
                        </InputSelect>
                            <label for="race">Race</label>
                    </div>
                </div>
                <div class="col-3">
                    <div class="form-floating">
                        <InputSelect class="form-select" @bind-Value="alignment" id="alignment">
                            <option value="LG">Lawfull-Good</option>
                            <option value="LN">Lawfull-Neutral</option>
                            <option value="LE">LawFull-Evil</option>
                            <option value="NG">Neutral-Good</option>
                            <option value="TN">Neutral</option>
                            <option value="NE">Neutral-Evil</option>
                            <option value="CG">Chaotic-Good</option>
                            <option value="CG">Chaotic-Neutral</option>
                            <option value="CG">Chaotic-Evil</option>
                        </InputSelect>
                        <label for="alignment">Alignment</label>
                    </div>
                </div>
                <div class="col-3">
                    <div class="form-floating">
                        <InputText @bind-Value="deity" id="deity" class="form-control"></InputText>
                        <label for="deity">Deity</label>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col">
                <div class="form-floating">
                    <InputSelect class="form-select" @bind-Value="size" id="size">
                        <option value="S">Small</option>
                        <option value="M">Medium</option>
                        <option value="L">Large</option>
                        <option value="O">Other</option>
                    </InputSelect>
                    <label for="size">Size</label>
                </div>
            </div>
            <div class="col">
                <div class="form-floating">
                    <InputNumber @bind-Value="age" id="age" class="form-control"></InputNumber>
                    <label for="age">Age</label>
                </div>
            </div>
    
            <div class="col">
                <div class="form-floating">
                    <InputSelect class="form-select" @bind-Value="gender" id="gender">
                        <option value="M">Male</option>
                        <option value="F">Female</option>
                        <option value="O">Other</option>
                    </InputSelect>
                    <label for="gender">Gender</label>
                </div>
            </div>
            <div class="col">
                <div class="form-floating">
                    <InputText @bind-Value="height" id="height" class="form-control"></InputText>
                    <label for="height">Height</label>
                </div>
            </div>
            <div class="col">
                <div class="form-floating">
                    <InputText @bind-Value="eyes" id="eyes" class="form-control"></InputText>
                    <label for="eyes">Eyes</label>
                </div>
            </div>
            <div class="col">
                <div class="form-floating">
                    <InputText @bind-Value="hair" id="hair" class="form-control"></InputText>
                    <label for="hair">Hair</label>
                </div>
            </div>
            <div class="col">
                <div class="form-floating">
                    <InputText @bind-Value="skin" id="skin" class="form-control"></InputText>
                    <label for="skin">Skin</label>
                </div>
            </div>
        </div>
    </div>
    <br /><br />
    <div class="row">
        <div class="col-2">
            <div class="form-floating">
                <InputNumber class="form-control" TValue="int" @bind-Value="str" @bind-Value:after=CalculateModifier></InputNumber>
                <label for="str">Strength (@strMod)</label>
            </div>
            <div class="form-floating">
                <InputNumber @bind-Value="dex" @bind-Value:after=CalculateModifier id="dex" class="form-control">></InputNumber>
                <label for="dex">Dexterity (@dexMod)</label>
            </div>
            <div class="form-floating">
                <InputNumber @bind-Value="con" @bind-Value:after=CalculateModifier id="con" class="form-control"></InputNumber>
                <label for="con">Constitution (@conMod)</label>
            </div>
        </div>
        <div class="col-2">
            <div class="form-floating">
                <InputNumber class="form-control" @bind-Value="tempStr" @bind-Value:after=CalculateModifier></InputNumber>
                <label for="tempStr">Temp Strength (@tempStrMod)</label>
            </div>
            <div class="form-floating">
                <InputNumber @bind-Value="tempDex" @bind-Value:after=CalculateModifier id="dex" class="form-control">></InputNumber>
                <label for="dex">Temp Dexterity (@tempDexMod)</label>
            </div>
            <div class="form-floating">
                <InputNumber @bind-Value="tempCon" @bind-Value:after=CalculateModifier id="con" class="form-control"></InputNumber>
                <label for="con">Temp Con (@tempConMod)</label>
            </div>
        </div>
        <div class="col-6">
            <div class="row flex-nowrap">
                <div class="col-2">
                    <div class="form-floating">
                        <InputNumber class="form-control" @bind-Value="maxHP"></InputNumber>
                        <label>Max HP</label>
                    </div>
                </div>
                <div class="col-2">
                    <div class="form-floating">
                        <InputNumber class="form-control" @bind-Value="currentHP"></InputNumber>
                        <label>HP</label>
                    </div>
                </div>
                <div class="col-3">
                    <div class="form-floating">
                        <InputNumber class="form-control" @bind-Value="nonLethalDmg"></InputNumber>
                        <label>Non-Lethal</label>
                    </div>
                </div>
                <div class="col-2">
                    <div class="form-floating">
                        <InputText class="form-control" @bind-Value="speed"></InputText>
                        <label>Speed</label>
                    </div>
                </div>
                <div class="col-4">
                    <div class="form-floating">
                        <InputText class="form-control" @bind-Value="dmgRedutions"></InputText>
                        <label>Damage Reduction</label>
                    </div>
                </div>
            </div>
            <div class="row flex-nowrap">
                <div class="col-2">
                    <div class="form-floating">
                        <InputNumber class="form-control readonly" @bind-Value="acTotal" readonly></InputNumber>
                        <label>AC</label>
                    </div>
                </div>
                <div class="col-1 px-0 mx-0">
                    <div class="form-floating">
                        <input class="form-control readonly p-1" type="text" readonly value="=10+" />
                    </div>
                </div>
                <div class="col-2 px-1">
                    <div class="form-floating">
                        <InputNumber class="form-control " @bind-Value="acArmor" @bind-Value:after=TotalAC></InputNumber>
                        <label>Armor</label>
                    </div>
                </div>
                <div class="col-2 px-1">
                    <div class="form-floating">
                        <InputNumber class="form-control" @bind-Value="acShield" @bind-Value:after=TotalAC></InputNumber>
                        <label>Shield</label>
                    </div>
                </div>
                <div class="col-2 px-1">
                    <div class="form-floating">
                        <InputNumber class="form-control " readonly @bind-Value="dexMod" @bind-Value:after=TotalAC></InputNumber>
                        <label>Dex</label>
                    </div>
                </div>
                <div class="col-2 px-1">
                    <div class="form-floating">
                        <InputNumber class="form-control " readonly @bind-Value="acSizeMod" @bind-Value:after=TotalAC></InputNumber>
                        <label>Size Mod</label>
                    </div>
                </div>
                <div class="col-2 px-1">
                    <div class="form-floating">
                        <InputNumber class="form-control " readonly @bind-Value="acNat" @bind-Value:after=TotalAC></InputNumber>
                        <label>Natural</label>
                    </div>
                </div>
                <div class="col-2 px-1">
                    <div class="form-floating">
                        <InputNumber class="form-control " readonly @bind-Value="acDeflection" @bind-Value:after=TotalAC></InputNumber>
                        <label>Defletection</label>
                    </div>
                </div>
            </div>
        </div>
        
    </div>

    <!--top of the row with skills-->
    <div class="row">
        <div class="col-2">
            <div class="form-floating">
                <InputNumber class="form-control" @bind-Value="wis" @bind-Value:after=CalculateModifier></InputNumber>
                <label for="wis">Wisdom (@wisMod)</label>
            </div>
            <div class="form-floating">
                <InputNumber @bind-Value="intel" @bind-Value:after=CalculateModifier id="int" class="form-control">></InputNumber>
                <label for="int">Intelligence (@intMod)</label>
            </div>
            <div class="form-floating">
                <InputNumber @bind-Value="cha" @bind-Value:after=CalculateModifier id="cha" class="form-control"></InputNumber>
                <label for="Cha">Charisma (@chaMod)</label>
            </div>
        </div>
        <div class="col-2">
            <div class="form-floating">
                <InputNumber class="form-control" @bind-Value="tempWis" @bind-Value:after=CalculateModifier></InputNumber>
                <label for="wis">Temp Wisdom (@tempWisMod)</label>
            </div>
            <div class="form-floating">
                <InputNumber @bind-Value="tempIntel" @bind-Value:after=CalculateModifier id="int" class="form-control">></InputNumber>
                <label for="int">Temp Intelligence (@tempIntMod)</label>
            </div>
            <div class="form-floating">
                <InputNumber @bind-Value="tempCha" @bind-Value:after=CalculateModifier id="cha" class="form-control"></InputNumber>
                <label for="Cha">Temp Charisma (@tempChaMod)</label>
            </div>
        </div>
        <div class="col-2">
            <div class="form-floating">
                <InputNumber class="form-control" @bind-Value="acTouch"></InputNumber>
                <label>Touch AC</label>
            </div>
            <div class="form-floating">
                <InputNumber class="form-control" @bind-Value="acFF"></InputNumber>
                <label>Flat-Footed AC</label>
            </div>
            <div class="form-floating">
                <InputNumber class="form-control" @bind-Value="init"></InputNumber>
                <label>Initiative</label>
            </div>
        </div>
    </div>
    <!--this is a clean break at the saves(left side) and skills(right)

    you should slipt the two in to a row -> 2 cols
    left col into more rows and the right into rows per skill

    good luck next friday ;)
    -->
</div>



@code {
    #region Constant Values
    Dictionary<string, string> raceStatChanges = new Dictionary<string, string>
    {
        {"DWF","CON,2,CHA,-2" },
        {"ELF","DEX,2,CON,-2"},
        {"GNO","CON,2,STR,-2"},
        {"HOR","STR,2,INT,-2,CHA,-2"},
        {"HAF","DEX,2,STR,-2"},
    };

    #endregion
    string characterName = string.Empty;
    string player = string.Empty;
    string classLvlString = string.Empty;
    string race = "HUM";
    string lastRace = "HUM";
    string alignment = "LG";
    string deity = string.Empty;
    string size = "M";
    int age = 18;
    string gender = "M";
    string height = string.Empty;
    string eyes = string.Empty;
    string hair = string.Empty;
    string skin = string.Empty;
    int str = 10;
    int strMod = 0;
    int dex = 10;
    int dexMod = 0;
    int con = 10;
    int conMod = 0;
    int wis = 10;
    int wisMod = 0;
    int intel = 10;
    int intMod = 0;
    int cha = 10;
    int chaMod = 0;

    int tempStr = 10;
    int tempStrMod = 0;
    int tempDex = 10;
    int tempDexMod = 0;
    int tempCon = 10;
    int tempConMod = 0;
    int tempWis = 10;
    int tempWisMod = 0;
    int tempIntel = 10;
    int tempIntMod = 0;
    int tempCha = 10;
    int tempChaMod = 0;

    int maxHP = 10;
    int currentHP = 10;
    int nonLethalDmg = 0;

    int acTotal = 10;
    int acTouch = 10;
    int acFF = 10;

    int acArmor = 0;
    int acShield = 0;
    int acSizeMod = 0;
    int acNat = 0;
    int acDeflection = 0;

    int init = 0;
    string speed = "30FT";
    string dmgRedutions = string.Empty;

    private Task AlterStatsRace()
    {
        SubtractRaceStats(lastRace);
        lastRace = race;
        AddRaceStats(race);
        return Task.CompletedTask;
    }

    private Task CalculateModifier()
    {
        //regular
        strMod = ModeifierMath(str);
        dexMod = ModeifierMath(dex);
        conMod = ModeifierMath(con);
        wisMod = ModeifierMath(wis);
        intMod = ModeifierMath(intel);
        chaMod = ModeifierMath(cha);
        //temp
        if (tempStr < str) tempStr = str;
        if (tempDex < dex) tempDex = dex;
        if (tempCon < con) tempCon = con;
        if (tempWis < wis) tempWis = wis;
        if (tempIntel < intel) tempIntel = intel;
        if (tempCha < cha) tempCha = cha;

        tempStrMod = ModeifierMath(tempStr);
        tempDexMod = ModeifierMath(tempDex);
        tempConMod = ModeifierMath(tempCon);
        tempWisMod = ModeifierMath(tempWis);
        tempIntMod = ModeifierMath(tempIntel);
        tempChaMod = ModeifierMath(tempCha);

        init = dexMod >= tempDexMod ? dexMod : tempDexMod;
        return Task.CompletedTask;
    }

    private int ModeifierMath(int value)
    {
        return (value - 10) / 2;
    }

    private void AddRaceStats(string race)
    {
        if (raceStatChanges.TryGetValue(race, out var changesStr))
        {
            string[] parts = changesStr.Split(',');
            for (int i = 0; i < parts.Length; i += 2)
            {
                if (int.TryParse(parts[i + 1], out int change))
                {
                    switch (parts[i])
                    {
                        case "STR":
                            str += (change);
                            strMod = ModeifierMath(str);
                            break;
                        case "DEX":
                            dex += (change);
                            dexMod = ModeifierMath(dex);
                            break;
                        case "CON":
                            con += (change);
                            conMod = ModeifierMath(con);
                            break;
                        case "WIS":
                            wis += (change);
                            wisMod = ModeifierMath(wis);
                            break;
                        case "INT":
                            intel += (change);
                            intMod = ModeifierMath(intel);
                            break;
                        case "CHA":
                            cha += (change);
                            chaMod = ModeifierMath(cha);
                            break;
                        default:
                            break;
                    }
                }
            }
        }
    }

    private void SubtractRaceStats(string race)
    {
        if(raceStatChanges.TryGetValue(race,out var changesStr))
        {
            string[] parts = changesStr.Split(',');
            for(int i = 0; i < parts.Length; i+=2)
            {
                if (int.TryParse(parts[i + 1],out int change))
                {
                    switch (parts[i])
                    {
                        case "STR":
                            str += (-1 * change);
                            strMod = ModeifierMath(str);
                            break;
                        case "DEX":
                            dex += (-1 * change);
                            dexMod = ModeifierMath(dex);
                            break;
                        case "CON":
                            con += (-1 * change);
                            conMod = ModeifierMath(con);
                            break;
                        case "WIS":
                            wis += (-1 * change);
                            wisMod = ModeifierMath(wis);
                            break;
                        case "INT":
                            intel += (-1 * change);
                            intMod = ModeifierMath(intel);
                            break;
                        case "CHA":
                            cha += (-1 * change);
                            chaMod = ModeifierMath(cha);
                            break;
                        default:
                            break;
                    }
                }
            }
        }
    }
    private Task TotalAC()
    {
        return Task.CompletedTask;
    }

}
